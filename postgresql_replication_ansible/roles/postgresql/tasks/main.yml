---

- name: Allow PostgreSQL port 5432 through UFWufw
  ufw:
    rule: allow
    port: "5432"
    proto: tcp

- name: Import postgreSQL repository key
  apt_key:
    url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
    state: present

- name: Add postgresql repository
  apt_repository:
    repo: deb http://apt.postgresql.org/pub/repos/apt {{ ansible_distribution_release }}-pgdg main
    state: present
    filename: pgdg

- name: Install postgresql packages
  apt:
     name: 
      - postgresql-{{ POSTGRES_VERSION }}
      - postgresql-contrib
     state: present
     update_cache: yes


- name: Ensure postgreSQL data directory has correct permissions
  file:
    path: "{{ DATA_DIRECTORY }}"
    owner: postgres
    group: postgres
    recurse: yes
    mode: '0700'

- name: Start postgresql service with pg_cluster
  shell : |
         pg_ctlcluster 16 main start 
  become: true
  become_method: sudo
  become_user: root

- name: Set postgres user password
  become_user: postgres
  postgresql_user:
    name: postgres
    password: "{{ postgres_password }}"

- name: Configure primary postgresql node
  become: yes
  become_user: postgres
  block:
    - name: Allow password auth in pg_hba.conf
      lineinfile:
        path: "{{ PG_HBA_CONF }}"
        line: "host all postgres 127.0.0.1/32 md5"
        insertafter: EOF
        state: present

    - name: create replication user
      postgresql_user:
        name: "{{ REPLICATION_USER }}"
        password: "{{ REPLICATION_USER_PASS }}"
        role_attr_flags: REPLICATION
        state: present
        db: postgres
      no_log: true

    - name: create pg_state_statement extension
      postgresql_ext:
        name: pg_stat_statements
        db: postgres
        state: present

    - name: Configure postgresql.conf
      template:
        src: postgresql.conf.j2
        dest: "{{ PG_CONF }}"
        owner: postgres
        mode: 0644

    - name: Configure pg_hba.conf
      lineinfile:
        path: "{{ PG_HBA_CONF }}"
        line: "host replication {{ REPLICATION_USER }} {{ pg_replica_01_host }}/32 md5"
    
    - name: Configure pg_hba.conf
      lineinfile:
        path: "{{ PG_HBA_CONF }}"
        line: "host all  {{ REPLICATION_USER }} {{ pg_replica_01_host }}/32 md5"
    
    - name: Grant pg_monitor role to replication user
      postgresql_membership:
        db: postgres
        target_roles: "{{ REPLICATION_USER }}"
        groups: pg_monitor
        state: present
        login_user: postgres
    
    - name: Restart postgresql service with pg_cluster
      shell : |
            pg_ctlcluster 16 main restart 
      become: true
      become_method: sudo
      become_user: root
      
  when: postgresql_role == 'primary'

- name: Configure replica postgresql node
  become: yes
  become_user: postgres
  block:
    - name: Wait for primary node to be up
      wait_for:
        host: "{{ pg_primary_host }}"
        port: 5432
        delay: 10
        timeout: 300
        state: started

    - name: Allow password auth in pg_hba.conf
      lineinfile:
        path: "{{ PG_HBA_CONF }}"
        line: "host    all postgres 127.0.0.1/32 md5"
        insertafter: EOF
        state: present

    - name: Stop postgresql service with pg_cluster
      shell : |
            pg_ctlcluster 16 main stop 
      become: true
      become_method: sudo
      become_user: root

    - name: Remove data directory
      file:
        path: "{{ DATA_DIRECTORY }}"
        state: absent
    
    - name: Create the empty data directory
      file:
        path: "{{ DATA_DIRECTORY }}"
        state: directory
        owner: postgres
        mode: '0700'

    - name: Configure postgresql.conf
      template:
        src: postgresql.conf.j2
        dest: "{{ PG_CONF }}"
        owner: postgres
        mode: 0644

    - name: Run pg_basebackup to initialize replica
      become: yes
      become_user: postgres
      shell: |
        pg_basebackup \
          -h {{ pg_primary_host }} \
          -p 5432 \
          -U {{ REPLICATION_USER }} \
          -D {{ DATA_DIRECTORY }} \
          -P \
          -Xs \
          -R \
          --checkpoint=fast 
          
      environment:
        PGPASSWORD: "{{ REPLICATION_USER_PASS }}"
      register: basebackup_result
      changed_when: true
    
    - name: start postgresql service with pg_cluster
      shell : |
            pg_ctlcluster 16 main start 
      become: true
      become_method: sudo
      become_user: root

  when: postgresql_role == 'replica'
    
